/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SwingFileReaderDemo.java
 *
 * Created on 2011-10-26, 17:56:43
 */
package basic.swing;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author libiun
 */
public class SwingFileReaderDemo extends javax.swing.JFrame {

    /** Creates new form SwingFileReaderDemo */
    public SwingFileReaderDemo() {
        this.initFileChooser();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jPanelNorth = new javax.swing.JPanel();
        jLabelFilepath = new javax.swing.JLabel();
        jTextFieldFilepath = new javax.swing.JTextField();
        jButtonOpen = new javax.swing.JButton();
        jScrollPaneCenter = new javax.swing.JScrollPane();
        jTextAreaContent = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanelNorth.setPreferredSize(new java.awt.Dimension(438, 80));

        jLabelFilepath.setText("文件路径");

        jTextFieldFilepath.setEditable(false);

        jButtonOpen.setText("打开");
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNorthLayout = new javax.swing.GroupLayout(jPanelNorth);
        jPanelNorth.setLayout(jPanelNorthLayout);
        jPanelNorthLayout.setHorizontalGroup(
            jPanelNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNorthLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelFilepath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldFilepath, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOpen)
                .addContainerGap())
        );
        jPanelNorthLayout.setVerticalGroup(
            jPanelNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNorthLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFilepath)
                    .addComponent(jTextFieldFilepath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOpen))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        getContentPane().add(jPanelNorth, java.awt.BorderLayout.PAGE_START);

        jScrollPaneCenter.setBorder(javax.swing.BorderFactory.createTitledBorder("显示文本内容"));

        jTextAreaContent.setColumns(20);
        jTextAreaContent.setLineWrap(true);
        jTextAreaContent.setRows(5);
        jTextAreaContent.setWrapStyleWord(true);
        jScrollPaneCenter.setViewportView(jTextAreaContent);

        getContentPane().add(jScrollPaneCenter, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-612)/2, (screenSize.height-543)/2, 612, 543);
    }//GEN-END:initComponents

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        filechooser.showOpenDialog(this);
        File selectFile = filechooser.getSelectedFile();

        if (selectFile == null) {
            JOptionPane.showMessageDialog(this, "你没有选择文件！", "提示", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            int choose = JOptionPane.showConfirmDialog(this, "你确定打开文件？", "请确认！", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (choose == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(this, "你取消了打开文件。", "提示：", JOptionPane.INFORMATION_MESSAGE);
                return;
            } else {
                String temp = "";
                BufferedReader bf = null;
                String pathName = selectFile.getPath();
                this.jTextFieldFilepath.setText(pathName);
                try {
                    int size = (int) selectFile.length();
                    byte[] tempArray = new byte[size];
                    FileInputStream fin = new FileInputStream(selectFile);
                    fin.read(tempArray);
                    temp = new String(tempArray);
                    this.jTextAreaContent.setText(temp);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jButtonOpenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SwingFileReaderDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SwingFileReaderDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SwingFileReaderDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SwingFileReaderDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SwingFileReaderDemo().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JLabel jLabelFilepath;
    private javax.swing.JPanel jPanelNorth;
    private javax.swing.JScrollPane jScrollPaneCenter;
    private javax.swing.JTextArea jTextAreaContent;
    private javax.swing.JTextField jTextFieldFilepath;
    // End of variables declaration//GEN-END:variables
    private JFileChooser filechooser = new JFileChooser();

    public final void initFileChooser() {
        //获取原来已有的过滤器
        FileFilter[] fileFilter = filechooser.getChoosableFileFilters();
        int fSize = fileFilter.length;
        for (int i = 0; i < fSize; i++) {
            filechooser.removeChoosableFileFilter(fileFilter[i]);
        }
        filechooser.addChoosableFileFilter(new TxtFilter());
        filechooser.addChoosableFileFilter(new JavaFilter());
    }
}

class TxtFilter extends FileFilter {

    private boolean flag;

    @Override
    public boolean accept(File f) {
        if (f.getName().toLowerCase().endsWith(".txt")) {
            flag = true;
        } else if (f.isDirectory()) {
            flag = true;
        } else {
            flag = false;
        }
        return flag;
    }

    @Override
    public String getDescription() {
        return "txt文件";
    }
}

class JavaFilter extends FileFilter {

    private boolean flag;

    @Override
    public boolean accept(File f) {
        if (f.getName().toLowerCase().endsWith(".java")) {
            flag = true;
        } else if (f.isDirectory()) {
            flag = true;
        } else {
            flag = false;
        }
        return flag;
    }

    @Override
    public String getDescription() {
        return "java文件";
    }
}